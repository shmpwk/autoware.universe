name: generate-sheet

on:
  push:
    branches:
      - beta/v*
      - sync-upstream
      - feat/spreadsheet-release-note
    tags:
      - v*

  workflow_dispatch:
    inputs:
      branch-name:
        description: The name of the branch to write spread sheet
        type: string
        required: false

jobs:
  generate-sheet:
    environment: oidc

    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    steps:
      - name: Set tag name
        id: set-tag-name
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            REF_NAME="${{ github.event.inputs.branch-name }}"
          else
            REF_NAME="${{ github.ref_name }}"
          fi

          echo ::set-output name=ref-name::"$REF_NAME"
          echo ::set-output name=tag-name::"${REF_NAME#beta/}"

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ steps.set-tag-name.outputs.ref-name }}

      # - name: Set target name for beta branches
      #   id: set-target-name
      #   run: |
      #     if [[ "${{ steps.set-tag-name.outputs.ref-name }}" =~ "beta/" ]]; then
      #       echo ::set-output name=target-name::\
      #         "${{ steps.set-tag-name.outputs.ref-name }}"
      #     fi

      - name: Create a local tag for beta branches
        run: |
          git tag "v0.6.0"

      - name: Run generate-changelog
        id: generate-changelog
        uses: shmpwk/autoware-github-actions/generate-changelog@dev
        with:
          save-json-output: true
          # git-cliff-args: 653305845a0937326064c750754bd52d20911097..6abed14d026866bb70b9516eb35f04e5de7ec644
          git-cliff-args: 9f4c833c586f578b38f49b31e289e25092efa327..6abed14d026866bb70b9516eb35f04e5de7ec644
          # git-cliff-args: f15689efe25d869211a8ce9140b0216982ad4cb1..HEAD
      # - name: Select verb
      #   id: select-verb
      #   run: |
      #     has_previous_draft=$(gh release view --json isDraft -q ".isDraft"\
      #     "${{ steps.set-tag-name.outputs.tag-name }}") || true

      #     verb=create
      #     if [ "$has_previous_draft" = "true" ]; then
      #       verb=edit
      #     fi

      #     echo ::set-output name=verb::"$verb"
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Arrange json data
        id: arrange-json
        run: |
          # jqdata=$(jq . context.json)
          body_array=()
          # emit empty link
          # for cliff_data in $(echo $jqdata | jq -r '.[].link'); do
          # IFS=$'\n' read -rd '' -a pipe_data <<< "$pipe"
          # for cliff_data in "${pipe_data[@]}"; do
          while read cliff_data; do
            url=$(echo $cliff_data | jq -r '.link')
            # PR url
            gh_url=$(echo $url | sed 's/https:\/\/github.com/\/repos/g' | sed 's/pull/pulls/g')
            if [[ -n "$gh_url" && "$gh_url" != "[]" ]]; then
              echo $gh_url
              # if [[ "$gh_url" != "[]" ]]; then
              gh_response=$(gh api -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" $gh_url)
              list_reviewers_for_a_pr="https://api.github.com$gh_url/reviews"
              curl_response=$(curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" $list_reviewers_for_a_pr)
            else
              echo "empty link"
              gh_url="UNDEFINED"
              url="UNDEFINED"
              gh_response=""
              curl_response=""
            fi

            # PR author
            author=$(echo $gh_response | jq '.user.login' | sed 's/\"//g')
            if [ -z "$author" ]; then author="UNDEFINED"; fi

            # PR body
            body=""
            body=$(echo $gh_response | jq '.body')
            if [ -z "$body" ]; then body="UNDEFINED"; fi
            body=$(printf '%s' "$body" | sed "s/'//g" | sed 's/\"//g' | sed 's/\\r\\n\\r\\n/\\n/g' | sed 's/\\r\\n//g' | sed 's/<!--[^>]*-->//g' | sed 's/#\{3,\}/\\n/g')
            # PR Description
            description=""
            description=$(echo $body | awk -F "## " '{print $1, $2}' | sed 's/'\''//g' | sed -r 's/Signed-off.*?>\\n//g' | sed 's/Description//' | sed 's/\\n//' | tac | sed 's/\\n//' | tac)
            if [[ -z "$description" || "$description" == " " || "$description" == "\\n" || "$description" == " \\n" ]]; then description="UNDEFINED"; fi
            related_links=""
            test_performed=""
            note_for_reviewers=""
            if [[ "$body" =~ "Related links" ]]; then
              # PR releated links
              related_links=$(echo $body | awk -F "## " '{print $3}' | sed 's/Related links//g' | sed 's/\\n//' | tac | sed 's/\\n//' | tac)
              # PR test
              test_performed=$(echo $body | awk -F "## " '{print $4}' | sed 's/Tests performed//g' | sed 's/\\n//' | tac | sed 's/\\n//' | tac)
              # Note for PR reviewers
              note_for_reviewers=$(echo $body | awk -F "## " '{print $5}' | sed 's/Notes for reviewers//g' | sed 's/\\n//' | tac | sed 's/\\n//' | tac)
            fi
            if [ -z "$related_links" ]; then related_links="UNDEFINED"; fi
            if [ -z "$test_performed" ]; then test_performed="UNDEFINED"; fi
            if [ -z "$note_for_reviewers" ]; then note_for_reviewers="UNDEFINED"; fi

            # PR review approvers
            approver=$(echo $curl_response | jq '.[] | select (.state?=="APPROVED")' | jq '.user.login' | sed 's/\"//g')
            if [ -z "$approver" ]; then approver="shmpwk"; fi

            # PR labels
            labels=$(echo $gh_response | jq '.labels[].name' | sed 's/\"//g')
            if [ -z "$labels" ]; then labels="UNDEFINED"; fi

            # id
            id=$(echo $cliff_data | jq -r '.id')
            if [ -z "$id" ]; then id="UNDEFINED"; fi

            # type
            type=$(echo $cliff_data | jq -r '.type')
            if [ -z "$type" ]; then type="UNDEFINED"; fi

            # title
            title=$(echo $cliff_data | jq -r '.title')
            if [ -z "$title" ]; then title="UNDEFINED"; fi

            body_arranged=$(jq -nc \
              --arg id "$id" \
              --arg type "$type" \
              --arg scope "$scope" \
              --arg title "$title" \
              --arg labels "$labels" \
              --arg url "$url" \
              --arg author "$author" \
              --arg approver "$approver" \
              --arg description "$description" \
              --arg related_links "$related_links" \
              --arg test_performed "$test_performed" \
              --arg note_for_reviewers "$note_for_reviewers" \
              '{"id": $id, "type": $type, "scope": $scope, "title": $title, "labels": $labels, "url": $url, "author": $author, "approver": $approver, "description": $description, "related_links": $related_links, "test_performed": $test_performed, "note_for_reviewers": $note_for_reviewers}')
            body_array+=("$body_arranged")
          done < <(jq -cr '.[]' context.json)
          json_array=$(printf "%s\n" "${body_array[@]}" | jq -sc '.')
          echo $json_array
          # id, tyoe, scope, title, author
          # array=$(echo "${bodies_array[@]}" | jq -cs .)
          # jqdatas=$(jq -nc '[$cliff_data, $bodies_array] | transpose | map({id: .[0].id, type: .[0].type, scope: .[0].scope, title: .[0].title, labels: .[1].labels, url: .[1].url, author:. [1].author, approver: .[1].approver, description: .[1].description, related_links: .[1].related_links, test_performed: .[1].test_performed, note_for_reviewers: .[1].note_for_reviewers})' --argjson cliff_data "$cliff_data" --argjson bodies_array "$array")
          # echo ::set-output name=jdata::"$jqdatas"
          echo ::set-output name=jdata::"$json_array"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      # - name: create json
      #   run: >
      #     curl -v "${{ secrets.EXEC_URL }}"
      #     -H "Accept: application/json"
      #     -H "Content-type: application/json"
      #     -X POST
      #     -w '\n'
      #     -d '${{ steps.arrange-json.outputs.jdata }}'

      - name: update spread sheets and mention slack
        uses: shmpwk/setup-spread-sheets@main
        with:
          release-spreadsheet-id: ${{ secrets.RELEASE_SPREADSHEET_ID }}
          member-spreadsheet-id: ${{ secrets.MEMBER_SPREADSHEET_ID }}
          slack-post-url: ${{ secrets.SLACK_POST_URL }}
          pr-contents: ${{ steps.arrange-json.outputs.jdata }}
          workload-identity-provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service-account: ${{ secrets.SERVICE_ACCOUNT }}
          enable-overwrite: true
          sheet-name: test
      - name: Show relese note
        run: |
          echo $NOTES
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NOTES: ${{ steps.arrange-json.outputs.jdata }}
