name: generate-sheet

on:
  push:
    branches:
      - beta/v*
      - sync-upstream
      - feat/spreadsheet-release-note
    tags:
      - v*

  workflow_dispatch:
    inputs:
      branch-name:
        description: The name of the branch to write spread sheet
        type: string
        required: false

jobs:
  generate-sheet:
    runs-on: ubuntu-latest
    steps:
      - name: Set tag name
        id: set-tag-name
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            REF_NAME="${{ github.event.inputs.branch-name }}"
          else
            REF_NAME="${{ github.ref_name }}"
          fi

          echo ::set-output name=ref-name::"$REF_NAME"
          echo ::set-output name=tag-name::"${REF_NAME#beta/}"

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ steps.set-tag-name.outputs.ref-name }}

      # - name: Set target name for beta branches
      #   id: set-target-name
      #   run: |
      #     if [[ "${{ steps.set-tag-name.outputs.ref-name }}" =~ "beta/" ]]; then
      #       echo ::set-output name=target-name::\
      #         "${{ steps.set-tag-name.outputs.ref-name }}"
      #     fi

      - name: Create a local tag for beta branches
        run: |
          git tag "v0.6.0"

      - name: Run generate-changelog
        id: generate-changelog
        uses: shmpwk/autoware-github-actions/generate-changelog@dev
        with:
          save-json-output: true
          git-cliff-args: 39780cb627be86c0fcde14e871ea60955f20d5ed..8d33e62f4243353d18e59e74b48dc804e1011424
      # - name: Select verb
      #   id: select-verb
      #   run: |
      #     has_previous_draft=$(gh release view --json isDraft -q ".isDraft"\
      #     "${{ steps.set-tag-name.outputs.tag-name }}") || true

      #     verb=create
      #     if [ "$has_previous_draft" = "true" ]; then
      #       verb=edit
      #     fi

      #     echo ::set-output name=verb::"$verb"
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Arrange json data
        id: arrange-json
        run: |
          r=$(cat context.json | jq .)
          links=$(echo $r | jq -c '.[].commits | map({ link: .links[3].href})')
          bodies_array=()
          for link in $links; do
            for url in $(echo $link | jq -r '.[].link'); do
              # PR url
              gh_url=$(echo $url | sed 's/https:\/\/github.com/\/repos/g' | sed 's/pull/pulls/g')
              if [ -z "$url" ]; then gh_url="UNDEFINED"; fi
              if [[ "$gh_url" != "null" ]]; then
                echo $gh_url
                gh_response=$(gh api -H "Accept: application/vnd.github+json" $gh_url)
              else
                gh_response=""
              fi

              # PR author
              author=$(echo $gh_response | jq '.user.login')

              # PR body
              body=$(echo $gh_response | jq '.body')
              if [ -z "$body" ]; then body="UNDEFINED"; fi
              body=$(printf '%s' "$body" | sed "s/'//" | sed 's/\\r\\n/\\n/g' | sed 's/<!--.*-->//g')
              # PR Description
              description=$(echo $body | awk -F "##" '{print $1, $2}' | sed 's/'\''//g' | sed -r 's/\"Signed-off.*> //g' | sed 's/Description//g')
              if [ -z "$description" ]; then body="UNDEFINED"; fi
              if [[ "$body" =~ "Related links" ]]; then
                # PR releated links
                related_links=$(echo $body | awk -F "##" '{print $3}' | sed 's/Related links//g')
                # PR test
                test_performed=$(echo $body | awk -F "##" '{print $4}' | sed 's/Tests performed//g')
                # Note for PR reviewers
                note_for_reviewers=$(echo $body | awk -F "##" '{print $5}' | sed 's/Notes for reviewers//g')
              fi
              if [ -z "$related_links" ]; then related_links="UNDEFINED"; fi
              if [ -z "$test_performed" ]; then test_performed="UNDEFINED"; fi
              if [ -z "$note_for_reviewers" ]; then note_for_reviewers="UNDEFINED"; fi

              # PR labels
              labels=$(echo $gh_response | jq '.labels[].name' | sed 's/\"//g')
              if [ -z "$labels" ]; then labels="UNDEFINED"; fi

              bodies=$(jq -nc --arg url "$url" \
                --arg author "$author" \
                --arg description "$description" \
                --arg related_links "$related_links" \
                --arg test_performed "$test_performed"\
                --arg note_for_reviewers "$note_for_reviewers"\
                --arg labels "$labels"\
                '{"labels": $labels, "url": $url, "author": $author, "description": $description, "related_links": $related_links, "test_performed": $test_performed, "note_for_reviewers": $note_for_reviewers}')
              bodies_array+=("$bodies")
            done
          done
          # id, tyoe, scope, title, author
          jqdata=$(echo $r | jq .[].commits | jq .[] | jq -s . | jq 'map({id: .id, type: .group, scope: .scope, title: .message})')
          array=$(echo "${bodies_array[@]}" | jq -cs .)
          jqdatas=$(jq -nc '[$jqdata, $bodies_array] | transpose | map({id: .[0].id, type: .[0].type, scope: .[0].scope, title: .[0].title, labels: .[1].labels, url: .[1].url, author:. [1].author, description: .[1].description, related_links: .[1].related_links, test_performed: .[1].test_performed, note_for_reviewers: .[1].note_for_reviewers})' --argjson jqdata "$jqdata" --argjson bodies_array "$array")
          echo ::set-output name=jdata::"$jqdatas"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: create json
        run: >
          curl -v "${{ secrets.EXEC_URL }}"
          -H "Accept: application/json"
          -H "Content-type: application/json"
          -X POST
          -w '\n'
          -d '${{ steps.arrange-json.outputs.jdata }}'

      - name: Show relese note
        run: |
          echo $NOTES
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTES: ${{ steps.arrange-json.outputs.jdata }}
